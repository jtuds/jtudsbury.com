<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>James Tudsbury - Web Developer</title>
    <description>Portfolio of Manchester based front end web developer James Tudsbury.</description>
    <link>http://jtudsbury.com/</link>
    <atom:link href="http://jtudsbury.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 15 Aug 2017 17:58:58 +0100</pubDate>
    <lastBuildDate>Tue, 15 Aug 2017 17:58:58 +0100</lastBuildDate>
    <generator>Jekyll v3.1.6</generator>
    
      <item>
        <title>Vanilla Javascript toggle attribute helper</title>
        <description>&lt;p&gt;Recently when needing to toggle the state of a data attribute using plain vanilla Javascript I found that though there was some articles and helper functions out there for toggling classes, there wasn’t any for data attributes, which I imagine are quite common. This is a very straightforward piece of code (more straightforward than toggling classes) but is really useful and it’s handy not to have to write these things from scratch every time so hopefully people can find this and use it.&lt;/p&gt;

&lt;h3 id=&quot;toggleattribute&quot;&gt;toggleAttribute&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function toggleAttribute (el, attr, val) {
	if (el.hasAttribute(attr) &amp;amp;&amp;amp; el.getAttribute(attr) === val) {
		el.removeAttribute(attr);
	} else {
		el.setAttribute(attr, val);
	}
};
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Here’s an example of how you might call that function&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;toggleAttribute(document.querySelector(&#39;.my-element&#39;), &#39;data-gonna-toggle&#39;, &#39;true&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;That will result in the element with a class of &lt;code class=&quot;highlighter-rouge&quot;&gt;.my-element&lt;/code&gt; having the attribute &lt;code class=&quot;highlighter-rouge&quot;&gt;data-gonna-toggle&lt;/code&gt; toggle between the value being &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt; or simply empty.&lt;/p&gt;

&lt;p&gt;This could be expanded further to toggle between two values, e.g. true and false. Though if true doesn’t exist you should be able to assume that the value is false, so a better example would be toggling between something non boolean such as “red” and “blue”. The function doesn’t currently cater for this as currently it just removes the attribute rather than replacing it with a different value but it may be something I look to do in the future.&lt;/p&gt;
</description>
        <pubDate>Tue, 15 Aug 2017 10:26:23 +0100</pubDate>
        <link>http://jtudsbury.com/posts/2017/08/15/toggle-attribute-plain-javascript.html</link>
        <guid isPermaLink="true">http://jtudsbury.com/posts/2017/08/15/toggle-attribute-plain-javascript.html</guid>
        
        
        <category>posts</category>
        
      </item>
    
      <item>
        <title>TIL - [] === [] // false. What?</title>
        <description>&lt;p&gt;Javascript is weird. Today I learned that the result of &lt;code class=&quot;highlighter-rouge&quot;&gt;[] === []&lt;/code&gt; is not &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt; as you might suspect but is in fact &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt;. To add to the strange, &lt;code class=&quot;highlighter-rouge&quot;&gt;[] == ![]&lt;/code&gt; equals &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;. What?&lt;/p&gt;

&lt;p&gt;Turns out what is happening when you do &lt;code class=&quot;highlighter-rouge&quot;&gt;[] === []&lt;/code&gt; is that under the hood, this comparison really looks like &lt;code class=&quot;highlighter-rouge&quot;&gt;new Array() === new Array()&lt;/code&gt;. When you see it like that, it becomes a bit clearer why it returns &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt;. The &lt;code class=&quot;highlighter-rouge&quot;&gt;new&lt;/code&gt; keyword is creating a new instance of an array object for each of the two &lt;code class=&quot;highlighter-rouge&quot;&gt;[]&lt;/code&gt; (array literals). So when asking whether the two are the same with the strict equality &lt;code class=&quot;highlighter-rouge&quot;&gt;===&lt;/code&gt; comparator, they aren’t, they’re two separate instances of an array object.&lt;/p&gt;

&lt;p&gt;In the case of &lt;code class=&quot;highlighter-rouge&quot;&gt;[] == ![]&lt;/code&gt; resulting in &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;, what’s happening here is we’re trying to compare an object to a boolean (&lt;code class=&quot;highlighter-rouge&quot;&gt;![]&lt;/code&gt; is equal to &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt;). So Javascript uses coercion on the values on both the left and right of the comparator until they are the same type. Essentially:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;=&amp;gt; []==![]

=&amp;gt; []==false // Type conversion by the statement itself

=&amp;gt; []==0 // To number of right operand

=&amp;gt; &quot;&quot;==0 // To Primitive call for Array which will in this case convert to empty string

=&amp;gt; 0==0 // To number call of &quot;&quot; which is 0

=&amp;gt; true
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;(the above snippet is courtesy of &lt;a href=&quot;https://stackoverflow.com/a/45444600/4969010&quot;&gt;Stack Overflow&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;So as you can see, both &lt;code class=&quot;highlighter-rouge&quot;&gt;[]&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;![]&lt;/code&gt; get coerced to 0, making &lt;code class=&quot;highlighter-rouge&quot;&gt;[] == ![]&lt;/code&gt; equal &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;. If we were to use the strict equals comparator (&lt;code class=&quot;highlighter-rouge&quot;&gt;===&lt;/code&gt;), coercion wouldn’t occur and we’d get &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt;. There’s an argument for never using &lt;code class=&quot;highlighter-rouge&quot;&gt;==&lt;/code&gt; but that’s not for this post!&lt;/p&gt;

&lt;p&gt;Little bits of weirdness like this are nice ways to learn a little more about Javascript and I’d encourage anyone trying to learn how Javascript works along with all its caveats to open up the console and just play around with stuff.&lt;/p&gt;
</description>
        <pubDate>Thu, 03 Aug 2017 10:26:23 +0100</pubDate>
        <link>http://jtudsbury.com/posts/til/2017/08/03/til-javascript-array-comparator.html</link>
        <guid isPermaLink="true">http://jtudsbury.com/posts/til/2017/08/03/til-javascript-array-comparator.html</guid>
        
        
        <category>posts</category>
        
        <category>til</category>
        
      </item>
    
      <item>
        <title>TIL - Using Array.from</title>
        <description>&lt;p&gt;This is my first attempt at writing post based on something I have learned today (or recently), hence the name TIL. These posts are intended to be short tidbits of learnings and stuff I’ve picked up, partly for my own benefit and hopefully for others too!&lt;/p&gt;

&lt;h3 id=&quot;using-arrayfrom&quot;&gt;Using Array.from&lt;/h3&gt;
&lt;p&gt;I have come up against an issue a few times when trying to do something with what I thought was an array but actually turned out to be array like &lt;code class=&quot;highlighter-rouge&quot;&gt;NodeList&lt;/code&gt;. When working with DOM elements, using something like &lt;code class=&quot;highlighter-rouge&quot;&gt;querySelectorAll(&#39;.elements&#39;)&lt;/code&gt; will return an object of the type &lt;code class=&quot;highlighter-rouge&quot;&gt;NodeList&lt;/code&gt; rather than of the type &lt;code class=&quot;highlighter-rouge&quot;&gt;Array&lt;/code&gt;. Some browsers don’t play too well with this when you use functions on the &lt;code class=&quot;highlighter-rouge&quot;&gt;NodeList&lt;/code&gt;. For example until last year using &lt;code class=&quot;highlighter-rouge&quot;&gt;forEach&lt;/code&gt; on a &lt;code class=&quot;highlighter-rouge&quot;&gt;NodeList&lt;/code&gt; in Chrome wouldn’t work, because &lt;code class=&quot;highlighter-rouge&quot;&gt;NodeLists&lt;/code&gt; weren’t iterable like &lt;code class=&quot;highlighter-rouge&quot;&gt;Arrays&lt;/code&gt; are. There are some hacky solutions to converting array like objects to real Arrays but &lt;code class=&quot;highlighter-rouge&quot;&gt;Array.from&lt;/code&gt; makes it simple, readable and concise.&lt;/p&gt;

&lt;p&gt;Let’s say we have a &lt;code class=&quot;highlighter-rouge&quot;&gt;NodeList&lt;/code&gt; called &lt;code class=&quot;highlighter-rouge&quot;&gt;myNodeList&lt;/code&gt;. Simply do &lt;code class=&quot;highlighter-rouge&quot;&gt;Array.from(myNodeList)&lt;/code&gt; and you’ll be returned an &lt;code class=&quot;highlighter-rouge&quot;&gt;Array&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;As browser support for doing things like using &lt;code class=&quot;highlighter-rouge&quot;&gt;forEach&lt;/code&gt; on a &lt;code class=&quot;highlighter-rouge&quot;&gt;NodeList&lt;/code&gt; improves, that particular use case will become less common, however you can still use it in cases such as turning a string into an array of characters, e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;Array.from(&#39;Hello&#39;)&lt;/code&gt; would become &lt;code class=&quot;highlighter-rouge&quot;&gt;[&quot;H&quot;, &quot;e&quot;, &quot;l&quot;, &quot;l&quot;, &quot;o&quot;]&lt;/code&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 05 Jul 2017 10:26:23 +0100</pubDate>
        <link>http://jtudsbury.com/posts/til/2017/07/05/til-using-array-from.html</link>
        <guid isPermaLink="true">http://jtudsbury.com/posts/til/2017/07/05/til-using-array-from.html</guid>
        
        
        <category>posts</category>
        
        <category>til</category>
        
      </item>
    
      <item>
        <title>Generic naming in CSS</title>
        <description>&lt;p&gt;Naming stuff in CSS is easy. If you forget about reusability, DRY (don’t repeat yourself), OOCSS (object orientated CSS), component based CSS, and reusable patterns, then it really is easy. Class names such as &lt;code class=&quot;highlighter-rouge&quot;&gt;.homepage-article-big&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;.homepage-article-big-alt&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;.homepage-article-big-alt-2&lt;/code&gt; mean you can add classes and tailor them to your hearts content without ever really considering what a good name might constitute. If you do care about all those things I mentioned, and you probably should if you want to build a scalable and future proof design system, then naming stuff in CSS isn’t easy, it’s really really hard.&lt;/p&gt;

&lt;p&gt;Of course this is nothing new and it’s a well documented issue with plenty of &lt;a href=&quot;https://seesparkbox.com/foundry/naming_css_stuff_is_really_hard&quot;&gt;articles&lt;/a&gt;, discussions, methodologies and techniques devised to help with it. One of the biggest helps I have come across in recent years is the &lt;a href=&quot;http://getbem.com/&quot;&gt;BEM methodology&lt;/a&gt;. I won’t go in to it in detail here because it has already been explained in numerous articles but if you haven’t heard of it I would recommend starting with &lt;a href=&quot;http://csswizardry.com/2013/01/mindbemding-getting-your-head-round-bem-syntax/&quot;&gt;Harry Robert’s article on the subject&lt;/a&gt;. In summary, BEM gives you a structured way to name your CSS classes. Most importantly it forces you to think about what type of class something is. Is it a block, a top level class that will encompass other classes, e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;.human&lt;/code&gt;? Is it an element, a child of the block, e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;.human__eye&lt;/code&gt;? Or is it a modifier, something that is a variation of the element, e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;.human__eye--blue&lt;/code&gt;? Thinking in this way, or in the way of any of the other methodologies such as OOCSS (and they can all work together, mostly) means that your class names are probably pretty good and you’re avoiding code like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.about-section {}
.homepage.about-section {}
.contact-page.about-section {}
.contact-page.about-section-alt {}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The above code will do a job, but it’s not reusable, it’s hard to maintain, and it’s probably going to break at some point.&lt;/p&gt;

&lt;h3 id=&quot;possible-solutions&quot;&gt;Possible solutions&lt;/h3&gt;
&lt;p&gt;The issue I have come across on multiple projects and for some time now is what to name things that are similar, but not similar enough to be the same block or component. For example I might have a class called &lt;code class=&quot;highlighter-rouge&quot;&gt;.card&lt;/code&gt; which has some padding, a border radius and a box shadow. This is all fine because I can add those styles to my &lt;code class=&quot;highlighter-rouge&quot;&gt;.card&lt;/code&gt; class like so:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.card {
	padding:20px;
	box-shadow: 1px 1px 1px #000;
	border-radius:2px;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If I then have a component very much like &lt;code class=&quot;highlighter-rouge&quot;&gt;.card&lt;/code&gt; but needs less padding, then I have to identify that somehow. You could add a class like &lt;code class=&quot;highlighter-rouge&quot;&gt;.card--small&lt;/code&gt; which adds a modifier on to the card class to signify that it is small. Then your CSS would look something like:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.card--small {
	padding:10px;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This variation of &lt;code class=&quot;highlighter-rouge&quot;&gt;.card&lt;/code&gt; might also require some extra margin, a border, and a transition. This is the point at which our variation of &lt;code class=&quot;highlighter-rouge&quot;&gt;.card&lt;/code&gt;, though very similar in looks, is starting to become a different thing in code. You could continue to use modifiers in a few different ways. The first of which is to name the modifier based on what the modification is doing like:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.card--margin {
	margin:10px;
}

.card--border {
	border:1px solid red;
}

.card--has-transition {
	transition: all 0.2s;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This method becomes an issue for a few reasons but for me most noticeably when using media queries. If I don’t want my card to have a border at less than 600px then at less than 600px my &lt;code class=&quot;highlighter-rouge&quot;&gt;.card--border&lt;/code&gt; class makes no sense.&lt;/p&gt;

&lt;p&gt;The second way to continue to use modifiers is to not reference the modification directly but do something like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.card--alt {
	margin:10px;
	border:1px solid red;
	transition: all 0.2s;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This works fine until you have another component similar to &lt;code class=&quot;highlighter-rouge&quot;&gt;.card&lt;/code&gt; but not quite the same. What do you name that? &lt;code class=&quot;highlighter-rouge&quot;&gt;.card--alt-2&lt;/code&gt;? It’s very convoluted.&lt;/p&gt;

&lt;p&gt;You could use a hierarchical based naming system such as:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.card--primary {
	padding:10px;
}

.card--secondary {
	margin:10px;
	border:1px solid red;
	transition: all 0.2s;
}

.card--tertiary {
	more styles for your other variant of card
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This isn’t too bad in my opinion but typing out “quaternary” isn’t fun and I don’t even know the name for the fifth item in that hierarchical naming system. The other issue with this is that it is a lie. &lt;code class=&quot;highlighter-rouge&quot;&gt;.card--secondary&lt;/code&gt; is of no less importance or less deserving of a primary label than &lt;code class=&quot;highlighter-rouge&quot;&gt;.card--primary&lt;/code&gt; is. The meaning inferred via hierarchical labeling isn’t actually an accurate representation of the components it is being used on.&lt;/p&gt;

&lt;p&gt;Finally, you could relate the class to the context in which it is being used like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.card--product {
	padding:10px;
}

.card--article-list {
	margin:10px;
	border:1px solid red;
	transition: all 0.2s;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This works up until the point where your &lt;code class=&quot;highlighter-rouge&quot;&gt;.card--product&lt;/code&gt; class is required away from a product page (or component). At which point you have to consider renaming the class, or copying the styles within it in to a newly named class, which goes against the DRY principle.&lt;/p&gt;

&lt;h3 id=&quot;an-alternative-solution&quot;&gt;An alternative solution&lt;/h3&gt;
&lt;p&gt;So this brings me to the point of this post, a proposed, alternative solution. As a developer what I would like the following from my class names;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;They are not a representation of the styles within it (such as &lt;code class=&quot;highlighter-rouge&quot;&gt;.card--margin&lt;/code&gt;), because styles can change&lt;/li&gt;
  &lt;li&gt;They do not follow a hierarchical naming system, because this adds a layer of meaning that won’t always truly represent the class&lt;/li&gt;
  &lt;li&gt;They can be extended upon without convoluted naming (such as &lt;code class=&quot;highlighter-rouge&quot;&gt;.card--alt-2&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;They can be uniquely identified in a meaningful way. Words are meaningful to me and can be shared, codes and numbers cannot&lt;/li&gt;
  &lt;li&gt;They can be reused anywhere and are not tied to context&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The idea I have been using to satisfy these requirements is something I’ll memorably call “generic yet meaningful” naming. The idea is to give your class names a theme that is unrelated to the code itself and any context it may be used in. For example, say I’m working on a website for a fashion retailer, I could take my card component and call it &lt;code class=&quot;highlighter-rouge&quot;&gt;.card-athens&lt;/code&gt;. Athens is obviously a city and has nothing directly to do with fashion and it has nothing to do with the styles that I put inside of that element. But it allows me to give the component a name that I can reference, and that others can reference. It attaches meaning to the class, without attaching too much meaning or context. I can reuse &lt;code class=&quot;highlighter-rouge&quot;&gt;.card-athens&lt;/code&gt; anywhere within the site, regardless of context and it makes sense. I can also extend this class quite easily for when I have similar components that are different in code. According to Google and the World Atlas, there are 4,416 cities in the world. That’s a lot of names you have at your disposable (though you probably, definitely, shouldn’t have 4,416 card components, but that’s another post), you can create 4,416 card components that are all different and have a different identifier but which are much more meaningful to humans than numbers or an ID code.&lt;/p&gt;

&lt;p&gt;Let’s get in to some examples of this in use, firstly on one of my own projects. The city theme is something I have used on a past project. Here is an example of it in use:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.panel {
	padding-top:40px;
}

.panel--athens {
	padding-top:60px;
}

.panel--athens__heading {
	
	@media (min-width:$medium) {
		text-align:right;
	}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This is quite a straightforward example. All I’m doing is giving the panel some additional padding to the padding set on &lt;code class=&quot;highlighter-rouge&quot;&gt;.panel&lt;/code&gt; and aligning the heading to the right after a certain breakpoint. This means I can have other panels without a heading aligned right, or with the heading aligned center, or with it positioned absolutely to the top of the page (for some reason), simply by having a different city name class. It also means I don’t have to use something like &lt;code class=&quot;highlighter-rouge&quot;&gt;.panel__heading--right&lt;/code&gt; because before the medium breakpoint is hit, that class makes no sense. Finally, it means I can use those styles anywhere within the site and they make sense because they aren’t tied to content or context.&lt;/p&gt;

&lt;p&gt;This is a technique that I have seen mentioned and used elsewhere in the wild. I attended a talk by Charlotte Jackson &lt;a href=&quot;https://twitter.com/Lottejackson&quot;&gt;@lottejackson&lt;/a&gt; from &lt;a href=&quot;http://clearleft.com/&quot;&gt;Clearleft&lt;/a&gt; where she mentioned using classes such as &lt;code class=&quot;highlighter-rouge&quot;&gt;.pump&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;.tire&lt;/code&gt; on a bicycle website she was working on. This was in the context of a talk about how to name components to create a design pattern rather than simply just a page. As mentioned in a previous post, there is a &lt;a href=&quot;http://alistapart.com/article/from-pages-to-patterns-an-exercise-for-everyone&quot;&gt;good article on that subject over on A List Apart&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I have also seen it being used on the BBC website, particularly in the sports section. They have gone for the theme of sporting venues for their generic naming with classes such as &lt;code class=&quot;highlighter-rouge&quot;&gt;.anfield&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;.lakeside&lt;/code&gt;. I had a very brief Twitter chat with &lt;a href=&quot;https://twitter.com/@shaunbent&quot;&gt;Shaun Bent&lt;/a&gt; who is a developer there and he very succinctly said that he found the technique has, “stopped patterns from being named and designed for a single use-case, meaning you get better reuse out of them”. On the flip side he said that they have found pattern bloat to be an issue, with many patterns becoming redundant. This is probably a byproduct of having so many generic names available and being able to separate each one from any other, meaning you can continue to add them without any adverse effects on existing components/patterns and without having to put too much thought in to a new name. This is something you have to look out for not just as a developer but as a designer. You have to be watchful of a design system becoming too big and having too many components. They shouldn’t just be bolted on as and when. I think constantly questioning and reviewing any new additions is a good approach to take. Don’t just add them because you can, ask why first and check you haven’t already got something that does a very similar job and whether adding another component would actually harm the consistency of the whole design.&lt;/p&gt;

&lt;p&gt;If you’re not finding your class names difficult to name, scale, or reuse then this solution is probably irrelevant. But if you are then it could be a good technique to try out and experiment with. Good luck!&lt;/p&gt;
</description>
        <pubDate>Wed, 13 Jul 2016 19:15:23 +0100</pubDate>
        <link>http://jtudsbury.com/posts/2016/07/13/generic-naming-in-css.html</link>
        <guid isPermaLink="true">http://jtudsbury.com/posts/2016/07/13/generic-naming-in-css.html</guid>
        
        
        <category>posts</category>
        
      </item>
    
      <item>
        <title>Upfront conf 2016 - my takeaways</title>
        <description>&lt;p&gt;I attended my first Upfront conference a couple of days ago, and though I’ve been to various talks and mini conferences, this was probably my first ever “proper” web conference. It was packed full of great speakers and ideas which I have noted down at the time and remembered since to varying effect. Here are some of my thoughts on the talks and what I’ve taken away from it all.&lt;/p&gt;

&lt;h3 id=&quot;a-field-guide-to-web-accessibility---derek-featherstone-featherhttpstwittercomfeather&quot;&gt;“A field guide to web accessibility” - Derek Featherstone &lt;a href=&quot;https://twitter.com/feather&quot;&gt;@feather&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This was a very enjoyable talk on what is often seen as a bit of a dull topic in the web community. Derek related accessibility issues to his own life and the lives of the people around him (his father in laws desktop was a sight to behold). The key thing I took from this talk was that writing accessible code does not equal accessible websites. It is a great first step but a site doesn’t need to be just coded with accessibility in mind, it has to be designed that way too.&lt;/p&gt;

&lt;p&gt;Derek invited the audience to do the straw test, which is where you take your fist and hold it as if you were holding a straw, and then look through the gap at a web page and attempt to use the page. It demonstrated how an accessible form in a coding sense was still very difficult to use as the labels and inputs were laid out so far apart. Simply moving the inputs underneath the labels made using the form under the conditions of the straw test much easier. A good rule of thumb is that good accessibility = good design so considering accessibility from a design point of view can help the design along quite a lot.&lt;/p&gt;

&lt;h3 id=&quot;from-pages-to-patterns---charlotte-jackson-lottejacksonhttpstwittercomlottejackson&quot;&gt;“From pages to patterns” - Charlotte Jackson &lt;a href=&quot;https://twitter.com/Lottejackson&quot;&gt;@lottejackson&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This was probably my favourite talk of the day. Charlotte spoke about pattern libraries and how she goes about implementing them on her projects. There was some interesting snippets such as an idea on naming CSS classes based on the theme of the project you are working on. So for example, on a bike website, you might use classes such as &lt;code class=&quot;highlighter-rouge&quot;&gt;.pump&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;.frame&lt;/code&gt; as your building blocks. These classes contain quite basic styles, some padding top and bottom for example, and what they allow you to do is give your classes a meaning but without giving them too much meaning or tying them to context too much, which equals reusability! This idea is basically in the same ballpark as using classes like &lt;code class=&quot;highlighter-rouge&quot;&gt;.wrapper&lt;/code&gt;, or &lt;code class=&quot;highlighter-rouge&quot;&gt;.block&lt;/code&gt; but it allows you to add to your class vocabulary without getting content specific.&lt;/p&gt;

&lt;p&gt;I have used a similar idea to this on a few of my projects. I often use a class called &lt;code class=&quot;highlighter-rouge&quot;&gt;.panel&lt;/code&gt; in which I’ll add some top and bottom padding and then have modifier classes for things like background colours, e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;.panel--background-red&lt;/code&gt;. I was finding that when variations of the panel class existed I was attaching content specific classes such as &lt;code class=&quot;highlighter-rouge&quot;&gt;.panel--product&lt;/code&gt; in order to achieve the different design. This meant that the &lt;code class=&quot;highlighter-rouge&quot;&gt;.panel--product&lt;/code&gt; class then couldn’t be used on anything that wasn’t a product, or it could but it wouldn’t make sense. So I wanted a generic name in the context of the site (or design system) but a name that could have meaning to the developer. With this in mind I started using city names as panel modifier classes, e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;.panel--moscow&lt;/code&gt;. This had no meaning in the context of the site but a developer could look it and know what styles a Moscow panel contained.&lt;/p&gt;

&lt;p&gt;I digress. My main takeaway from this talk wasn’t the naming conventions described above, it was naming exercise that Charlotte explained. She has &lt;a href=&quot;http://alistapart.com/article/from-pages-to-patterns-an-exercise-for-everyone&quot;&gt;written about it on A List Apart&lt;/a&gt; and I would highly recommend checking it out in detail. To summarise, the exercise involves getting the people involved in the project, which means everyone from developers to clients to project managers, you print out the site designs and as a group cut out every component that you find and group similar components together. Then you each come up with a name for the components and see what patterns emerge. I think this is a great way to really define what a component is in your design and name it accordingly rather than giving that task solely to a developer, who has their own biases. To go further with this, a group of developers (or anyone comfortable with code) could make a timeboxed attempt at coding up the component to achieve a similar result. You can assess the results and look for patterns to get an idea on the best way to set a component up in the code.&lt;/p&gt;

&lt;p&gt;My main takeway from this talk was definitely the exercise. I can definitely see myself using this and I think it’d be a great exercise to do with some front end developers and designers in the near future. I think you could do this exercise on new/existing projects that you work on or even just pick a website that you have no involvement in. Either way will start to get your mind thinking in a design system / component way.&lt;/p&gt;

&lt;h3 id=&quot;making-it-better-without-making-it-over---rebecca-murphey-rmurpheyhttpstwittercomrmurphey&quot;&gt;“Making it better without making it over” - Rebecca Murphey &lt;a href=&quot;https://twitter.com/rmurphey&quot;&gt;@rmurphey&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Rebecca works on the Indeed job site and her talk was all about how to improve a system without completely starting from scratch, an approach that she pointed out would be very risky for a site the size of and with the profitability of Indeed. There was a trip down memory lane as she highlighted some of the popular (and not so popular) frameworks and libraries of the past and brought us all the way up to the present with the likes of Node and Backbone.&lt;/p&gt;

&lt;p&gt;My takeaways from this were that you can always start from scratch and make a new shiny thing, but it’s going to be outdated and some other developers pain in the arse at some point just like it was yours. Starting from scratch doesn’t come without risk (in fact there is a lot of risk involved) and using the latest and greatest framework/library/thing doesn’t automatically make a project great or future proof.&lt;/p&gt;

&lt;h3 id=&quot;i-am-grout---peter-gasston-stopsatgreenhttpstwittercomstopsatgreen&quot;&gt;“I am grout” - Peter Gasston &lt;a href=&quot;https://twitter.com/stopsatgreen&quot;&gt;@stopsatgreen&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Peters talk was all about how the web is dead and how we should give up (kind of / not). This talk really put in to context the current landscape of the web and the potential threats that it faces. Publishers are now turning away from the web and hosting their content on Facebook, Medium and native device platforms. There was a remarkable point about how for a lot of people, the web is just Facebook and actually a lot of people who are Facebook users don’t know what the web is. This was for a couple of reasons, some people just have all the content that they’d ever want on Facebook. News, pictures, videos, social, it’s all served up on a platter on Facebook. Then some people turn to it for the performance gains. The cost of using the web in developing countries is high so users in these countries turn to Facebook where content is a lot more optimised than it is on the web (generally) and they get a lot more for their money.&lt;/p&gt;

&lt;p&gt;Thankfully the web isn’t completely dead, but it could be if we don’t look after it. Things like progressive web apps and caring about performance on our websites means that there is hope for the web but just because the web won once doesn’t mean it will again. This is quite a worrying thought and I think the web could well be in significant danger, however there is some great people working on the web doing some great things and though I don’t think the mere existence of these people means the web will thrive, I think it gives it a fighting chance and we should all play our part on improving and advocating it.&lt;/p&gt;

&lt;p&gt;By the way - the talks name came from Peters realisation that the web was akin to the grout holding his tiles together in the shower. Metaphor of the day for certain.&lt;/p&gt;

&lt;h3 id=&quot;computer-science-with-threads-and-needles---mariko-kosaka-kosamarihttpstwittercomkosamari&quot;&gt;“Computer science with threads and needles” - Mariko Kosaka &lt;a href=&quot;https://twitter.com/kosamari&quot;&gt;@kosamari&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This was certainly the most unique talk of the day in my opinion. Mariko shown everybody how she had delved in to the world of hardware to mix her hobby (knitting) with programming, in this case she had programmed threading machines to knit a coded pattern. The talk had some basic introduction to how circuits worked (a required memory jogger for myself) and along with explaining how she did this she also gave us some live demos of programmed hardware, which included inviting the audience to visit a website that controlled the colour of an LED on the stage, resulting in a mini discotheque on stage. This was a great talk about just how far you can get in to something regardless of experience and a bit of a nudge to experiment and play with whatever your interests are and see how that can link in to the day job of a developer.&lt;/p&gt;

&lt;h3 id=&quot;cant-you-make-it-more-like-bootstrap---alice-bartlett-alicebartletthttpstwittercomalicebartlett&quot;&gt;“Can’t you make it more like Bootstrap?” - Alice Bartlett &lt;a href=&quot;https://twitter.com/alicebartlett&quot;&gt;@alicebartlett&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This was the talk I was looking forward to seeing the most. It led off from Charlottes earlier talk quite nicely and was all about the component system used at the Financial Times called Origami. Alice detailed how diverse the Financial Times online presence was, admitting she didn’t even know quite how many sites there are under the FT name. With this diversity came diversity of code, there was examples of where an icon had been implemented in 4 (I think) different ways to achieve the exact same effect. Origami is a component library which contains THE way a component should be implemented but the issue was that nobody was using it. On joining the FT Alice did some internal user testing and got some feedback that was the influence for the talks name, “Can’t you make it more like Bootstrap”. So this talk was less about what component libraries were and more about how to get people working on the product or within the company using them once they are in place. Documentation seemed to be a massive influencer, with people really liking the way the likes of Bootstrap and Future Learn presented theirs. The solution was to implement some good documentation presented in a usable way for Origami.&lt;/p&gt;

&lt;p&gt;My main takeaway from this was that you can’t just make something and expect people to use it because it’s great, you have to make it easy to use aswell. Good documentation is key to this and good documentation has to have just enough detail but also be concise and it has to be well presented, i.e. not hidden away on a Github page or something similar. This requires more effort but is worth it in the long run.&lt;/p&gt;

&lt;h3 id=&quot;works-on-my-machine-or-the-problem-is-between-keyboard-and-chair---lena-reinhard-lrnrdhttpstwittercomlrnrd&quot;&gt;“Works on my machine, or the problem is between keyboard and chair” - Lena Reinhard &lt;a href=&quot;https://twitter.com/lrnrd&quot;&gt;@lrnrd&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I would say that this was the most thought provoking and certainly hard hitting talk of the day. In a nutshell, this talk was about various forms of discrimination within the tech industry and how we as contributors to that industry and members of that community/society should do more to stop it and prevent it from happening. I agreed with the overall point of this talk, which I think was to promote action to help reduce and ultimately stop discrimination within the industry and how as mostly privileged members of the community, i.e. not sufferers of discrimination, we are in a position to make an impact. It also highlighted how just because you might not suffer from the issues she discussed, that does not mean that they do not exist and aren’t the cause of suffering for others within the industry.&lt;/p&gt;

&lt;p&gt;My gripe with this talk however was with what I felt was a very negative and sweeping criticism of the industry and everyone in it. The content and delivery of the first half of the talk seemed to suggest that the whole industry was racist, sexist, homophobic, plus more, and completely ignored any efforts to improve this situation or acknowledge that they existed. I also didn’t agree that every company or individual in the industry fit in to this description and the suggestion that they did is something that I don’t think is fair to anybody, including those people who could be traditionally discriminated against yet are very happy and equally treated in their role. I think this is perhaps a case of points of view. From a positive one, I think we should be encouraging more equality through those that already practice it instead of negatively targeting those that don’t and approaching it from that angle.&lt;/p&gt;

&lt;p&gt;In general I think any talk that highlights any form of discrimination or inequality is worth it purely for the potential for increased awareness and Lena did finish the talk on a positive note with steps we could all take to improve the situation, but my impression of the talk was marred by the its delivery and focus.&lt;/p&gt;

</description>
        <pubDate>Sun, 29 May 2016 14:24:23 +0100</pubDate>
        <link>http://jtudsbury.com/posts/talks/2016/05/29/upfront-conference-2016-my-takeaways.html</link>
        <guid isPermaLink="true">http://jtudsbury.com/posts/talks/2016/05/29/upfront-conference-2016-my-takeaways.html</guid>
        
        
        <category>posts</category>
        
        <category>talks</category>
        
      </item>
    
  </channel>
</rss>
